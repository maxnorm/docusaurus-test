"use strict";(globalThis.webpackChunkCompose_Documentation=globalThis.webpackChunkCompose_Documentation||[]).push([[2061],{1638:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"getting-started/your-first-diamond","title":"Your First Diamond","description":"In this guide, you\'ll learn how to create a diamond from scratch and understand every piece of the architecture.","source":"@site/docs/getting-started/your-first-diamond.md","sourceDirName":"getting-started","slug":"/getting-started/your-first-diamond","permalink":"/docusaurus-test/docs/getting-started/your-first-diamond","draft":false,"unlisted":false,"editUrl":"https://github.com/Perfect-Abstractions/Compose/tree/main/docs/docs/getting-started/your-first-diamond.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"mainSidebar","previous":{"title":"Quick Start","permalink":"/docusaurus-test/docs/getting-started/quick-start"},"next":{"title":"Overview","permalink":"/docusaurus-test/docs/foundations/overview"}}');var a=t(4848),s=t(8453);const o={sidebar_position:3},r="Your First Diamond",c={},d=[{value:"What is a Diamond?",id:"what-is-a-diamond",level:2},{value:"The Diamond Architecture",id:"the-diamond-architecture",level:3},{value:"Step-by-Step Guide",id:"step-by-step-guide",level:2},{value:"1. Understanding the Components",id:"1-understanding-the-components",level:3},{value:"2. Create the Diamond Base",id:"2-create-the-diamond-base",level:3},{value:"3. Deploy DiamondCutFacet",id:"3-deploy-diamondcutfacet",level:3},{value:"4. Add Your First Facet",id:"4-add-your-first-facet",level:3},{value:"5. Initialize Your Token",id:"5-initialize-your-token",level:3},{value:"6. Interact with Your Diamond",id:"6-interact-with-your-diamond",level:3},{value:"Key Concepts Explained",id:"key-concepts-explained",level:2},{value:"Delegatecall Magic",id:"delegatecall-magic",level:3},{value:"Shared Storage",id:"shared-storage",level:3},{value:"Function Selectors",id:"function-selectors",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"Testing Your Diamond",id:"testing-your-diamond",level:2},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"your-first-diamond",children:"Your First Diamond"})}),"\n",(0,a.jsx)(n.p,{children:"In this guide, you'll learn how to create a diamond from scratch and understand every piece of the architecture."}),"\n",(0,a.jsx)(n.h2,{id:"what-is-a-diamond",children:"What is a Diamond?"}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.strong,{children:"diamond"})," is a smart contract that follows the ",(0,a.jsx)(n.strong,{children:"ERC-2535 Diamond Standard"}),". Think of it as a modular smart contract system where you can:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Add, replace, or remove functionality"})," after deployment"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Combine multiple facets"})," (modules) into one address"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Share storage"})," across all facets using a unified storage layout"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Exceed the 24KB contract size limit"})," by splitting code across facets"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"the-diamond-architecture",children:"The Diamond Architecture"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          Diamond Proxy              \u2502\n\u2502  (Single Address, Delegatecalls)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n      \u2502                \u2502              \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510\n\u2502  Facet A  \u2502   \u2502   Facet B   \u2502  \u2502 Facet C\u2502\n\u2502  (ERC-20) \u2502   \u2502  (ERC-721)  \u2502  \u2502 (Owner)\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2502                \u2502              \u2502\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502\n         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         \u2502   Shared Storage      \u2502\n         \u2502  (Diamond Storage)    \u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,a.jsx)(n.h2,{id:"step-by-step-guide",children:"Step-by-Step Guide"}),"\n",(0,a.jsx)(n.h3,{id:"1-understanding-the-components",children:"1. Understanding the Components"}),"\n",(0,a.jsx)(n.p,{children:"A complete diamond consists of:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Diamond Contract"})," - The main contract that users interact with"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"DiamondCutFacet"})," - Manages adding/removing/replacing facets"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Functional Facets"})," - Your actual business logic (ERC-20, etc.)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Libraries"})," - Helper functions for custom facets"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"2-create-the-diamond-base",children:"2. Create the Diamond Base"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-solidity",children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {Diamond} from "compose/Diamond.sol";\n\n/// @title MyDiamond\n/// @notice A customizable diamond contract\n/// @dev Inherits core diamond functionality from Compose\ncontract MyDiamond is Diamond {\n    /// @notice Creates a new diamond\n    /// @param _contractOwner The address that will own this diamond\n    /// @param _diamondCutFacet The address of the DiamondCutFacet\n    constructor(\n        address _contractOwner,\n        address _diamondCutFacet\n    ) Diamond(_contractOwner, _diamondCutFacet) {\n        // The diamond is now ready to receive facets\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"3-deploy-diamondcutfacet",children:"3. Deploy DiamondCutFacet"}),"\n",(0,a.jsx)(n.p,{children:"The DiamondCutFacet is special\u2014it's the only facet that must be added during construction:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-solidity",children:'import {DiamondCutFacet} from "compose/facets/DiamondCutFacet.sol";\n\n// Deploy it once\nDiamondCutFacet diamondCutFacet = new DiamondCutFacet();\n\n// Pass its address to your diamond\nMyDiamond diamond = new MyDiamond(\n    msg.sender,  // owner\n    address(diamondCutFacet)\n);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"4-add-your-first-facet",children:"4. Add Your First Facet"}),"\n",(0,a.jsx)(n.p,{children:"Let's add ERC-20 functionality:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-solidity",children:'import {ERC20Facet} from "compose/facets/ERC20Facet.sol";\nimport {IDiamondCut} from "compose/interfaces/IDiamondCut.sol";\n\n// 1. Deploy the facet\nERC20Facet erc20Facet = new ERC20Facet();\n\n// 2. Prepare the function selectors\nbytes4[] memory selectors = new bytes4[](9);\nselectors[0] = ERC20Facet.name.selector;\nselectors[1] = ERC20Facet.symbol.selector;\nselectors[2] = ERC20Facet.decimals.selector;\nselectors[3] = ERC20Facet.totalSupply.selector;\nselectors[4] = ERC20Facet.balanceOf.selector;\nselectors[5] = ERC20Facet.transfer.selector;\nselectors[6] = ERC20Facet.allowance.selector;\nselectors[7] = ERC20Facet.approve.selector;\nselectors[8] = ERC20Facet.transferFrom.selector;\n\n// 3. Create the facet cut\nIDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\ncut[0] = IDiamondCut.FacetCut({\n    facetAddress: address(erc20Facet),\n    action: IDiamondCut.FacetCutAction.Add,\n    functionSelectors: selectors\n});\n\n// 4. Execute the diamond cut\nIDiamondCut(address(diamond)).diamondCut(cut, address(0), "");\n'})}),"\n",(0,a.jsx)(n.h3,{id:"5-initialize-your-token",children:"5. Initialize Your Token"}),"\n",(0,a.jsx)(n.p,{children:"Create an init facet for one-time setup:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-solidity",children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {LibERC20} from "compose/libraries/LibERC20.sol";\n\ncontract ERC20InitFacet {\n    /// @notice Initialize the ERC-20 token\n    /// @dev Can only be called once\n    function initERC20(\n        string calldata _name,\n        string calldata _symbol,\n        uint8 _decimals,\n        uint256 _initialSupply\n    ) external {\n        LibERC20.ERC20Storage storage s = LibERC20.getStorage();\n        \n        // Ensure we haven\'t initialized yet\n        require(bytes(s.name).length == 0, "Already initialized");\n        \n        // Set token details\n        s.name = _name;\n        s.symbol = _symbol;\n        s.decimals = _decimals;\n        \n        // Mint initial supply to caller\n        if (_initialSupply > 0) {\n            s.totalSupply = _initialSupply;\n            s.balances[msg.sender] = _initialSupply;\n            \n            emit Transfer(address(0), msg.sender, _initialSupply);\n        }\n    }\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Call it via ",(0,a.jsx)(n.code,{children:"diamondCut"})," with initialization data:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-solidity",children:'// Deploy init facet\nERC20InitFacet initFacet = new ERC20InitFacet();\n\n// Prepare init data\nbytes memory initData = abi.encodeWithSelector(\n    ERC20InitFacet.initERC20.selector,\n    "My Token",\n    "MTK",\n    18,\n    1_000_000 ether\n);\n\n// Execute diamond cut with initialization\nIDiamondCut(address(diamond)).diamondCut(\n    cut,  // empty or with more facets\n    address(initFacet),\n    initData\n);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"6-interact-with-your-diamond",children:"6. Interact with Your Diamond"}),"\n",(0,a.jsx)(n.p,{children:"Now you can use your diamond like any ERC-20 token:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-solidity",children:'import {IERC20} from "compose/interfaces/IERC20.sol";\n\n// Cast diamond to ERC-20 interface\nIERC20 token = IERC20(address(diamond));\n\n// Use standard ERC-20 functions\nuint256 balance = token.balanceOf(msg.sender);\ntoken.transfer(recipient, 100 ether);\ntoken.approve(spender, 1000 ether);\n'})}),"\n",(0,a.jsx)(n.h2,{id:"key-concepts-explained",children:"Key Concepts Explained"}),"\n",(0,a.jsx)(n.h3,{id:"delegatecall-magic",children:"Delegatecall Magic"}),"\n",(0,a.jsx)(n.p,{children:"When you call a function on the diamond:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Diamond receives the call"}),"\n",(0,a.jsx)(n.li,{children:"Diamond looks up which facet implements that function"}),"\n",(0,a.jsxs)(n.li,{children:["Diamond ",(0,a.jsx)(n.code,{children:"delegatecalls"})," to that facet"]}),"\n",(0,a.jsxs)(n.li,{children:["Facet executes using ",(0,a.jsx)(n.strong,{children:"diamond's storage"})]}),"\n",(0,a.jsx)(n.li,{children:"Result is returned to caller"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"User \u2192 Diamond.transfer() \n       \u2193 (delegatecall)\n       ERC20Facet.transfer() \n       \u2193 (reads/writes)\n       Diamond's Storage\n"})}),"\n",(0,a.jsx)(n.h3,{id:"shared-storage",children:"Shared Storage"}),"\n",(0,a.jsxs)(n.p,{children:["All facets share the same storage in the diamond. This is why libraries like ",(0,a.jsx)(n.code,{children:"LibERC20"})," are crucial\u2014they ensure everyone accesses storage at the same location:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-solidity",children:'// Both the facet and your custom code access the same storage\nLibERC20.ERC20Storage storage s = LibERC20.getStorage();\n// Always returns storage at keccak256("compose.erc20")\n'})}),"\n",(0,a.jsx)(n.h3,{id:"function-selectors",children:"Function Selectors"}),"\n",(0,a.jsx)(n.p,{children:"Each function has a unique 4-byte signature (selector):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-solidity",children:'bytes4 selector = ERC20Facet.transfer.selector;\n// selector = 0xa9059cbb (first 4 bytes of keccak256("transfer(address,uint256)"))\n'})}),"\n",(0,a.jsx)(n.p,{children:"The diamond uses these selectors to route calls to the correct facet."}),"\n",(0,a.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,a.jsx)(n.p,{children:"Here's a complete deployment script:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-solidity",children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport "forge-std/Script.sol";\nimport {MyDiamond} from "../src/MyDiamond.sol";\nimport {DiamondCutFacet} from "compose/facets/DiamondCutFacet.sol";\nimport {ERC20Facet} from "compose/facets/ERC20Facet.sol";\nimport {ERC20InitFacet} from "../src/facets/ERC20InitFacet.sol";\nimport {IDiamondCut} from "compose/interfaces/IDiamondCut.sol";\n\ncontract DeployDiamond is Script {\n    function run() external {\n        vm.startBroadcast();\n\n        // Step 1: Deploy DiamondCutFacet\n        DiamondCutFacet cutFacet = new DiamondCutFacet();\n        \n        // Step 2: Deploy Diamond\n        MyDiamond diamond = new MyDiamond(msg.sender, address(cutFacet));\n        \n        // Step 3: Deploy ERC20Facet\n        ERC20Facet erc20 = new ERC20Facet();\n        \n        // Step 4: Deploy InitFacet\n        ERC20InitFacet initFacet = new ERC20InitFacet();\n        \n        // Step 5: Prepare facet cuts\n        bytes4[] memory selectors = getERC20Selectors();\n        IDiamondCut.FacetCut[] memory cuts = new IDiamondCut.FacetCut[](1);\n        cuts[0] = IDiamondCut.FacetCut({\n            facetAddress: address(erc20),\n            action: IDiamondCut.FacetCutAction.Add,\n            functionSelectors: selectors\n        });\n        \n        // Step 6: Prepare init data\n        bytes memory initData = abi.encodeWithSelector(\n            ERC20InitFacet.initERC20.selector,\n            "Compose Token",\n            "COMP",\n            18,\n            1_000_000 ether\n        );\n        \n        // Step 7: Execute diamond cut with initialization\n        IDiamondCut(address(diamond)).diamondCut(\n            cuts,\n            address(initFacet),\n            initData\n        );\n        \n        vm.stopBroadcast();\n        \n        console.log("Diamond deployed at:", address(diamond));\n    }\n    \n    function getERC20Selectors() internal pure returns (bytes4[] memory) {\n        bytes4[] memory selectors = new bytes4[](9);\n        selectors[0] = ERC20Facet.name.selector;\n        selectors[1] = ERC20Facet.symbol.selector;\n        selectors[2] = ERC20Facet.decimals.selector;\n        selectors[3] = ERC20Facet.totalSupply.selector;\n        selectors[4] = ERC20Facet.balanceOf.selector;\n        selectors[5] = ERC20Facet.transfer.selector;\n        selectors[6] = ERC20Facet.allowance.selector;\n        selectors[7] = ERC20Facet.approve.selector;\n        selectors[8] = ERC20Facet.transferFrom.selector;\n        return selectors;\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"testing-your-diamond",children:"Testing Your Diamond"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-solidity",children:'// test/MyDiamond.t.sol\nimport {Test} from "forge-std/Test.sol";\nimport {IERC20} from "compose/interfaces/IERC20.sol";\n\ncontract MyDiamondTest is Test {\n    address diamond;\n    IERC20 token;\n    \n    function setUp() public {\n        // Deploy your diamond (using the script above)\n        // ...\n        \n        token = IERC20(diamond);\n    }\n    \n    function testTokenName() public {\n        assertEq(token.name(), "Compose Token");\n    }\n    \n    function testTransfer() public {\n        address recipient = address(0x123);\n        uint256 amount = 100 ether;\n        \n        token.transfer(recipient, amount);\n        assertEq(token.balanceOf(recipient), amount);\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsx)(n.p,{children:"You now understand how to build a diamond from scratch! Continue learning:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/docs/core-concepts/facets-and-libraries",children:"Core Concepts: Facets and Libraries"})})," - Deep dive into the architecture"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/docs/api/overview",children:"Available Facets"})})," - Explore what Compose provides"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/docs/guides/creating-custom-facets",children:"Creating Custom Facets"})})," - Build your own facets"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/docs/guides/upgrading-diamonds",children:"Upgrading Diamonds"})})," - Learn about diamond cuts"]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{title:"Pro Tip",type:"tip",children:(0,a.jsx)(n.p,{children:"In production, consider using a multi-sig wallet or DAO for the diamond owner to ensure secure upgrades."})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(6540);const a={},s=i.createContext(a);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);